// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Session {
    id        String   @id
    sid       String   @unique
    data      String
    expiresAt DateTime
}

model User {
    id         Int         @id @default(autoincrement())
    username   String      @unique @db.VarChar(30)
    password   String
    userFolder UserFolder?
    joinedOn   DateTime    @default(now())
}

model UserFolder {
    id      Int      @id @default(autoincrement())
    name    String   @unique @db.VarChar
    owner   User     @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    ownerId Int      @unique
    files   File[]
    folders Folder[]
}

model Folder {
    id              Int        @id @default(autoincrement())
    name            String     @db.VarChar(30)
    createdAt       DateTime   @default(now())
    updatedAt       DateTime   @updatedAt
    userFolder      UserFolder @relation(fields: [userFolderName], references: [name], onDelete: Cascade, onUpdate: Cascade)
    userFolderName  String
    files           File[]

    @@unique([name, userFolderName])
}

model File {
    id                   Int         @id @default(autoincrement())
    name                 String
    fileExtension        String      @db.VarChar(30)
    mimetype             String      @db.VarChar(30)
    uploadedAt           DateTime    @default(now())
    updatedAt            DateTime    @updatedAt
    userFolder           UserFolder? @relation(fields: [userFolderName], references: [name], onDelete: Cascade, onUpdate: Cascade)
    userFolderName       String?
    folder               Folder?     @relation(fields: [folderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    folderId             Int?
    size                 BigInt
    cloudinary_url       String
    cloudinary_public_id String

    @@unique([name, folderId])
    @@unique([name, userFolderName])
}
